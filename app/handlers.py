import os
import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from .db import Database

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ChatManagement(StatesGroup):
    waiting_for_chat_id = State()

def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{seconds}—Å"
    elif seconds < 3600:
        minutes = seconds // 60
        secs = seconds % 60
        return f"{minutes}–º {secs}—Å"
    elif seconds < 86400:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        return f"{hours}—á {minutes}–º"
    else:
        days = seconds // 86400
        hours = (seconds % 86400) // 3600
        return f"{days}–¥ {hours}—á"

def is_chat_allowed(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à—ë–Ω –ª–∏ —á–∞—Ç –≤ whitelist"""
    allowed_chats = os.getenv("ALLOWED_CHATS", "")
    if not allowed_chats:
        return False
    
    allowed_ids = [int(x.strip()) for x in allowed_chats.split(",") if x.strip()]
    return chat_id in allowed_ids

def is_main_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    main_admin_id = os.getenv("MAIN_ADMIN_ID")
    if not main_admin_id:
        return False
    return user_id == int(main_admin_id)

async def check_admin_rights(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ"""
    try:
        chat_member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
        return chat_member.status in ["creator", "administrator"]
    except Exception:
        return False

async def check_bot_admin_rights(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞"""
    try:
        bot_member = await message.bot.get_chat_member(message.chat.id, message.bot.id)
        return bot_member.status in ["creator", "administrator"]
    except Exception:
        return False

@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not is_chat_allowed(message.chat.id):
        await message.reply("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
        return
    
    if not await check_admin_rights(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.")
        return
    
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–∏–Ω–≥–∏.\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/top - –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\n"
        "/me - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/debug_chat_id - –ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞\n"
        "/debug_open_pings - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏\n\n"
        "üîí –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã."
    )

@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not is_chat_allowed(message.chat.id):
        return
    
    if not await check_admin_rights(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.")
        return
    
    help_text = """
üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/top` - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
‚Ä¢ `/me` - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/debug_chat_id` - –ü–æ–∫–∞–∑–∞—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
‚Ä¢ `/debug_open_pings` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–∏–Ω–≥–∏ —á–µ—Ä–µ–∑ @username –∏–ª–∏ text_mention
‚Ä¢ –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–∏–Ω–≥ –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ —Ä–µ–∞–∫—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ß–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ whitelist
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
"""
    
    await message.reply(help_text, parse_mode="HTML")

@router.message(Command("debug_chat_id"))
async def cmd_debug_chat_id(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ whitelist"""
    chat_type = message.chat.type
    chat_id = message.chat.id
    chat_title = message.chat.title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    
    debug_info = f"""
üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**

**–¢–∏–ø —á–∞—Ç–∞:** {chat_type}
**–ù–∞–∑–≤–∞–Ω–∏–µ:** {chat_title}
**Chat ID:** `{chat_id}`

**–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ whitelist:**
–î–æ–±–∞–≤—å—Ç–µ `{chat_id}` –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è `ALLOWED_CHATS`

**–ü—Ä–∏–º–µ—Ä:**
`ALLOWED_CHATS=123456789,-987654321,{chat_id}`
"""
    
    await message.reply(debug_info, parse_mode="HTML")

@router.message(Command("debug_open_pings"))
async def cmd_debug_open_pings(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏ –≤ —á–∞—Ç–µ"""
    if not is_chat_allowed(message.chat.id):
        return
    
    if not await check_admin_rights(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.")
        return
    
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    open_pings = await db.get_open_pings(message.chat.id)
    
    if not open_pings:
        await message.reply("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–∏–Ω–≥–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    
    result = "‚è∞ **–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏:**\n\n"
    
    for user_id, ping_ts, source_message_id in open_pings:
        elapsed = int(datetime.now().timestamp()) - ping_ts
        elapsed_str = format_duration(elapsed)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await db.get_user_info(user_id)
        username = user_info.get('username', f'user_{user_id}') if user_info else f'user_{user_id}'
        
        # –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if source_message_id:
            chat_username = message.chat.username
            if chat_username:
                message_link = f"https://t.me/{chat_username}/{source_message_id}"
                link_text = f"[—Å–æ–æ–±—â–µ–Ω–∏–µ]({message_link})"
            else:
                link_text = f"ID: {source_message_id}"
        else:
            link_text = "ID –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        result += f"üë§ **@{username}** - {elapsed_str} ({link_text})\n"
    
    await message.reply(result, parse_mode="HTML", disable_web_page_preview=True)

@router.message(Command("top"))
async def cmd_top(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
    if not is_chat_allowed(message.chat.id):
        return
    
    if not await check_admin_rights(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.")
        return
    
    bot = message.bot
    db: Database = getattr(bot, "db")
    bot_id = getattr(bot, "bot_id", None)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users = await db.get_top(message.chat.id, limit=10)
    
    if not top_users:
        await message.reply("üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    
    result = "üèÜ **–¢–æ–ø 10 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞:**\n\n"
    
    for i, (user_id, n, avg_sec, username) in enumerate(top_users, 1):
        if bot_id and user_id == bot_id:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        
        if avg_sec is not None:
            avg_str = format_duration(int(avg_sec))
        else:
            avg_str = "N/A"
        
        result += f"{i}. **@{username}** - {avg_str} (n={n})\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏
    open_pings = await db.get_open_pings(message.chat.id)
    if open_pings:
        result += "\n‚è∞ **–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏:**\n"
        for user_id, ping_ts, source_message_id in open_pings:
            if bot_id and user_id == bot_id:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            
            elapsed = int(datetime.now().timestamp()) - ping_ts
            elapsed_str = format_duration(elapsed)
            
            user_info = await db.get_user_info(user_id)
            username = user_info.get('username', f'user_{user_id}') if user_info else f'user_{user_id}'
            
            # –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if source_message_id:
                chat_username = message.chat.username
                if chat_username:
                    message_link = f"https://t.me/{chat_username}/{source_message_id}"
                    link_text = f"[—Å–æ–æ–±—â–µ–Ω–∏–µ]({message_link})"
                else:
                    link_text = f"ID: {source_message_id}"
            else:
                link_text = "ID –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            
            result += f"üë§ **@{username}** - {elapsed_str} ({link_text})\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö (–¥–æ 1000)", callback_data="top_all")]
    ])
    
    await message.reply(result, parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True)

@router.callback_query(F.data == "top_all")
async def on_top_all(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ 1000)"""
    if not is_chat_allowed(callback.message.chat.id):
        await callback.answer("‚ùå –ß–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", show_alert=True)
        return
    
    if not await check_admin_rights(callback.message):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", show_alert=True)
        return
    
    bot = callback.message.bot
    db: Database = getattr(bot, "db")
    bot_id = getattr(bot, "bot_id", None)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = await db.get_top(callback.message.chat.id, limit=1000)
    
    if not all_users:
        await callback.answer("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    result = "üìä **–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–¥–æ 1000):**\n\n"
    
    for i, (user_id, n, avg_sec, username) in enumerate(all_users, 1):
        if bot_id and user_id == bot_id:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        
        if avg_sec is not None:
            avg_str = format_duration(int(avg_sec))
        else:
            avg_str = "N/A"
        
        result += f"{i}. **@{username}** - {avg_str} (n={n})\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(result) > 4096:
        parts = [result[i:i+4096] for i in range(0, len(result), 4096)]
        for i, part in enumerate(parts):
            if i == 0:
                await callback.message.edit_text(part, parse_mode="HTML")
            else:
                await callback.message.answer(part, parse_mode="HTML")
    else:
        await callback.message.edit_text(result, parse_mode="HTML")
    
    await callback.answer()

@router.message(Command("me"))
async def cmd_me(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_chat_allowed(message.chat.id):
        return
    
    if not await check_admin_rights(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.")
        return
    
    if not message.from_user:
        return
    
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    since_ts = int((datetime.now() - timedelta(days=30)).timestamp())
    stats = await db.get_user_stats(message.chat.id, message.from_user.id, since_ts)
    
    if not stats:
        await message.reply("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    
    n, avg_sec = stats
    
    if avg_sec is not None:
        avg_str = format_duration(int(avg_sec))
    else:
        avg_str = "N/A"
    
    result = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{message.from_user.username or message.from_user.first_name}
üìà **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–Ω–≥–æ–≤:** {n}
‚è±Ô∏è **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** {avg_str}
"""
    
    await message.reply(result, parse_mode="HTML")

@router.message(F.text | F.caption)
async def on_message(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not is_chat_allowed(message.chat.id):
        return
    
    bot = message.bot
    db: Database = getattr(bot, "db")
    bot_id = getattr(bot, "bot_id", None)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user and not message.from_user.is_bot and (not bot_id or message.from_user.id != bot_id):
        await db.upsert_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
        )

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏–Ω–≥–∏
    entities = message.entities or []
    text = message.text or message.caption or ""
    
    for ent in entities:
        if (
            (ent.type == "text_mention" and ent.user and not ent.user.is_bot)
            or (ent.type == "mention")
        ) and (not bot_id or (ent.user and ent.user.id != bot_id)):
            target_user_id = None
            if ent.type == "text_mention" and ent.user:
                target_user_id = ent.user.id
            elif ent.type == "mention":
                mention_text = text[ent.offset : ent.offset + ent.length]
                username = mention_text.lstrip("@")
                target_user_id = await db.resolve_username(username)
                logging.info(f"mention_text: {mention_text}, username: {username}, resolved user_id: {target_user_id}")
                if not target_user_id:
                    await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.")
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ user_id –¥–ª—è @{username}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.")
                    continue
            if target_user_id and target_user_id != message.from_user.id:
                logging.info(f"–°–æ–∑–¥–∞—ë–º –ø–∏–Ω–≥: {ent.type} –¥–ª—è user_id={target_user_id}")
                await db.record_ping(
                    chat_id=message.chat.id,
                    source_message_id=message.message_id,
                    source_user_id=message.from_user.id,
                    target_user_id=target_user_id,
                    ping_reason=ent.type,
                    ping_ts=int(message.date.timestamp()),
                )
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
    if message.from_user and not message.from_user.is_bot and (not bot_id or message.from_user.id != bot_id):
        await db.close_oldest_open_ping_by_message(
            chat_id=message.chat.id,
            target_user_id=message.from_user.id,
            close_message_id=message.message_id,
            close_ts=int(message.date.timestamp()),
        )

@router.message(F.reply_to_message)
async def on_reply(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not is_chat_allowed(message.chat.id):
        return
    
    bot = message.bot
    db: Database = getattr(bot, "db")
    bot_id = getattr(bot, "bot_id", None)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
    if message.from_user and not message.from_user.is_bot and (not bot_id or message.from_user.id != bot_id):
        await db.close_oldest_open_ping_by_message(
            chat_id=message.chat.id,
            target_user_id=message.from_user.id,
            close_message_id=message.message_id,
            close_ts=int(message.date.timestamp()),
        )

@router.message(F.reaction)
async def on_reaction(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not is_chat_allowed(message.chat.id):
        return
    
    bot = message.bot
    db: Database = getattr(bot, "db")
    bot_id = getattr(bot, "bot_id", None)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
    if message.from_user and not message.from_user.is_bot and (not bot_id or message.from_user.id != bot_id):
        await db.close_oldest_open_ping_by_reaction(
            chat_id=message.chat.id,
            target_user_id=message.from_user.id,
            close_message_id=message.message_id,
            close_ts=int(message.date.timestamp()),
        )


