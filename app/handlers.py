import os
import logging
import secrets
import string
import re
import time
from datetime import datetime, timedelta
from typing import Optional, Dict, Set
from functools import lru_cache

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest


from app.db import Database

router = Router()

# –ö—ç—à –¥–ª—è rate limiting
_rate_limit_cache: Dict[int, float] = {}
_rate_limit_window = 1.0  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

# –ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
_admin_cache: Dict[int, Dict[int, float]] = {}  # chat_id -> {user_id: timestamp}
_admin_cache_ttl = 300  # 5 –º–∏–Ω—É—Ç

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ChatActivation(StatesGroup):
    waiting_for_chat_name = State()

def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{seconds}—Å"
    elif seconds < 3600:
        minutes = seconds // 60
        secs = seconds % 60
        return f"{minutes}–º {secs}—Å"
    elif seconds < 86400:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        return f"{hours}—á {minutes}–º"
    else:
        days = seconds // 86400
        hours = (seconds % 86400) // 3600
        return f"{days}–¥ {hours}—á"

def escape_username(username: Optional[str], user_id: int) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ username –¥–ª—è Markdown"""
    if not username:
        return f'user_{user_id}'
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    escaped = re.sub(r'([_*[\]()~`>#+=|{}.!-])', r'\\\1', username)
    return escaped

def format_user_display(username: Optional[str], user_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º @"""
    if not username:
        return f'user_{user_id}'  # –ë–µ–∑ @ –¥–ª—è user_id
    return f'@{escape_username(username, user_id)}'  # –° @ –¥–ª—è username

def create_message_link(chat_id: int, chat_username: Optional[str], message_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    if chat_username:
        return f"https://t.me/{chat_username}/{message_id}"
    else:
        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
        chat_id_str = str(chat_id)
        if chat_id_str.startswith('-100'):
            chat_id_short = chat_id_str[4:]
        else:
            chat_id_short = chat_id_str
        return f"https://t.me/c/{chat_id_short}/{message_id}"

def is_main_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    main_admin_id = os.getenv("MAIN_ADMIN_ID")
    if not main_admin_id:
        return False
    return user_id == int(main_admin_id)

def generate_activation_code() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    return ''.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(8))

def rate_limit(user_id: int) -> bool:
    """Rate limiting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    now = time.time()
    if user_id in _rate_limit_cache:
        if now - _rate_limit_cache[user_id] < _rate_limit_window:
            return False
    _rate_limit_cache[user_id] = now
    return True

def clean_rate_limit_cache():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ rate limiting"""
    now = time.time()
    expired = [user_id for user_id, timestamp in _rate_limit_cache.items() 
               if now - timestamp > _rate_limit_window * 2]
    for user_id in expired:
        del _rate_limit_cache[user_id]

def clean_admin_cache():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    now = time.time()
    for chat_id in list(_admin_cache.keys()):
        expired_users = [user_id for user_id, timestamp in _admin_cache[chat_id].items() 
                        if now - timestamp > _admin_cache_ttl]
        for user_id in expired_users:
            del _admin_cache[chat_id][user_id]
        if not _admin_cache[chat_id]:
            del _admin_cache[chat_id]

def validate_username(username: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è username"""
    if not username:
        return False
    # Telegram username format: 5-32 characters, letters, digits, underscores
    pattern = r'^[a-zA-Z0-9_]{5,32}$'
    return bool(re.match(pattern, username))

def validate_chat_name(chat_name: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞"""
    if not chat_name or len(chat_name) < 2 or len(chat_name) > 50:
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    invalid_chars = ['<', '>', '&', '"', "'", '\\', '/']
    return not any(char in chat_name for char in invalid_chars)

@lru_cache(maxsize=1000)
def escape_username(username: Optional[str], user_id: int) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç username –¥–ª—è Markdown —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if not username:
        return f"user_{user_id}"
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    escaped = re.sub(r'([_*[\]()~`>#+=|{}.!-])', r'\\\1', username)
    return escaped

def format_user_display(username: Optional[str], user_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not username:
        return f"user_{user_id}"
    return f"@{username}"

def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{seconds}—Å"
    elif seconds < 3600:
        minutes = seconds // 60
        secs = seconds % 60
        return f"{minutes}–º {secs}—Å"
    elif seconds < 86400:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        return f"{hours}—á {minutes}–º"
    else:
        days = seconds // 86400
        hours = (seconds % 86400) // 3600
        return f"{days}–¥ {hours}—á"

def create_message_link(chat_id: int, chat_username: Optional[str], message_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if chat_username:
        return f"https://t.me/{chat_username}/{message_id}"
    else:
        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return f"https://t.me/c/{str(chat_id)[4:]}/{message_id}"

@lru_cache(maxsize=100)
def get_bot_commands(bot_username: str = "pingmeter_bot") -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å username –±–æ—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    bot_mention = f"@{bot_username}"
    return {
        "start": f"/start{bot_mention}",
        "generate_code": f"/generate_code{bot_mention}",
        "activate": f"/activate{bot_mention}",
        "name": f"/name{bot_mention}",
        "top_fast": f"/top_fast{bot_mention}",
        "top_slow": f"/top_slow{bot_mention}",
        "me": f"/me{bot_mention}",
        "help": f"/help{bot_mention}",
        "clear_db": f"/clear_db{bot_mention}",
        "test": f"/test{bot_mention}",
        "list_activated": f"/list_activated{bot_mention}",
        "deactivate_chat": f"/deactivate_chat{bot_mention}",
        "debug_chat_id": f"/debug_chat_id{bot_mention}",
        "debug_open_pings": f"/debug_open_pings{bot_mention}"
    }

async def check_admin_rights(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if not message.from_user:
        return False
    
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    now = time.time()
    if chat_id in _admin_cache and user_id in _admin_cache[chat_id]:
        if now - _admin_cache[chat_id][user_id] < _admin_cache_ttl:
            return True
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat_member = await message.bot.get_chat_member(chat_id, user_id)
        is_admin = chat_member.status in ['creator', 'administrator']
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if chat_id not in _admin_cache:
            _admin_cache[chat_id] = {}
        _admin_cache[chat_id][user_id] = now
        
        return is_admin
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False



@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å username –±–æ—Ç–∞
    commands = get_bot_commands()
    
    if message.chat.type == "private":
        # –õ–° —Å –±–æ—Ç–æ–º
        if is_main_admin(message.from_user.id):
            await message.reply(
                f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞.\n\n"
                f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"‚Ä¢ {commands['generate_code']} - –°–æ–∑–¥–∞—Ç—å –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞\n"
                f"‚Ä¢ {commands['list_activated']} - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
                f"‚Ä¢ {commands['deactivate_chat']} chat_id - –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç\n"
                f"‚Ä¢ {commands['clear_db']} - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n\n"
                f"üîß –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞:\n"
                f"1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {commands['generate_code']}\n"
                f"2. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–∞—Ç–∞\n"
                f"3. –í —á–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ {commands['activate']} –∫–æ–¥"
            )
        else:
            await message.reply(
                f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–∏–Ω–≥–∏.\n\n"
                f"üîß –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ —á–∞—Ç–µ:\n"
                f"1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥\n"
                f"2. –í —á–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ {commands['activate']} –∫–æ–¥\n\n"
                f"üìã –ö–æ–º–∞–Ω–¥—ã –≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —á–∞—Ç–µ:\n"
                f"‚Ä¢ {commands['top_fast']} - –¢–æ–ø –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
                f"‚Ä¢ {commands['top_slow']} - –¢–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
                f"‚Ä¢ {commands['me']} - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"‚Ä¢ {commands['help']} - –°–ø—Ä–∞–≤–∫–∞"
            )
    else:
        # –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        bot = message.bot
        db: Database = getattr(bot, "db")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç
        is_activated = await db.is_chat_activated(message.chat.id)
        if not is_activated:
            await message.reply(
                f"‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.\n\n"
                f"üîß –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n"
                f"1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥\n"
                f"2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É {commands['activate']} –∫–æ–¥\n\n"
                f"üí° –ö–æ–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º."
            )
            return
        
        if not await check_admin_rights(message):
            await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.")
            return
        
        await message.reply(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–∏–Ω–≥–∏.\n\n"
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"‚Ä¢ {commands['top_fast']} - –¢–æ–ø –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
            f"‚Ä¢ {commands['top_slow']} - –¢–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
            f"‚Ä¢ {commands['me']} - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"‚Ä¢ {commands['help']} - –°–ø—Ä–∞–≤–∫–∞\n"
            f"‚Ä¢ {commands['debug_chat_id']} - –ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞\n"
            f"‚Ä¢ {commands['debug_open_pings']} - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏\n\n"
            f"üîí –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã."
        )

@router.message(Command("generate_code"))
async def cmd_generate_code(message: Message) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤ –õ–°)"""
    if message.chat.type != "private":
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
        return
    
    if not is_main_admin(message.from_user.id):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return
    
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
    activation_code = generate_activation_code()
    expires_at = int((datetime.now() + timedelta(hours=24)).timestamp())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ
    await db.save_activation_code(activation_code, expires_at, message.from_user.id)
    
    await message.reply(
        f"üîë **–ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω!**\n\n"
        f"**–ö–æ–¥:** `{activation_code}`\n"
        f"**–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {datetime.fromtimestamp(expires_at).strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:**\n"
        f"1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç\n"
        f"2. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
        f"3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /activate {activation_code}\n"
        f"4. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞\n\n"
        f"‚ö†Ô∏è **–ö–æ–¥ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞!**",
        parse_mode="Markdown"
    )

@router.message(Command("activate"))
async def cmd_activate(message: Message, state: FSMContext) -> None:
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —á–∞—Ç –ø–æ –∫–æ–¥—É"""
    if message.chat.type == "private":
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —á–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.")
        return
    
    if not await check_admin_rights(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —á–∞—Ç
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    is_activated = await db.is_chat_activated(message.chat.id)
    if is_activated:
        await message.reply("‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) != 2:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/activate <–∫–æ–¥>\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä: /activate ABC12345"
        )
        return
    
    activation_code = args[1].upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    code_info = await db.get_activation_code(activation_code)
    if not code_info:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–¥ –∏—Å—Ç—ë–∫.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    await state.update_data(
        activation_code=activation_code,
        chat_id=message.chat.id,
        chat_title=message.chat.title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    )
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    await state.set_state(ChatActivation.waiting_for_chat_name)
    await message.reply(
        f"‚úÖ –ö–æ–¥ `{activation_code}` –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!\n\n"
        f"üìù –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/name –Ω–∞–∑–≤–∞–Ω–∏–µ` –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞.\n\n"
        f"üí° –ü—Ä–∏–º–µ—Ä—ã:\n"
        f"‚Ä¢ `/name –†–∞–±–æ—á–∏–π —á–∞—Ç`\n"
        f"‚Ä¢ `/name –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏`\n"
        f"‚Ä¢ `/name –û–±—â–∏–π —á–∞—Ç`"
    )

@router.message(Command("name"))
async def cmd_name(message: Message, state: FSMContext) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    if message.chat.type == "private":
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —á–∞—Ç–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    current_state = await state.get_state()
    if current_state != ChatActivation.waiting_for_chat_name.state:
        await message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /activate –∫–æ–¥")
        return
    
    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /name –Ω–∞–∑–≤–∞–Ω–∏–µ_—á–∞—Ç–∞")
        return
    
    chat_name = args[1].strip()
    if not validate_chat_name(chat_name):
        await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")
        return
    
    data = await state.get_data()
    activation_code = data.get("activation_code")
    chat_id = data.get("chat_id")
    
    if not activation_code or not chat_id:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Ç
    await db.activate_chat(chat_id, chat_name, activation_code, message.from_user.id)
    
    await state.clear()
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
    escaped_chat_name = chat_name.replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    commands = get_bot_commands()
    
    await message.reply(
        f"üéâ **–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
        f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {escaped_chat_name}\n"
        f"‚Ä¢ Chat ID: `{chat_id}`\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª: @{message.from_user.username or message.from_user.first_name}\n\n"
        f"‚úÖ –¢–µ–ø–µ—Ä—å –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
        f"üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        f"‚Ä¢ {commands['top_fast']} - –¢–æ–ø –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        f"‚Ä¢ {commands['top_slow']} - –¢–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        f"‚Ä¢ {commands['me']} - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"‚Ä¢ {commands['help']} - –°–ø—Ä–∞–≤–∫–∞\n\n"
        f"üîí **–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.**"
    )

@router.message(ChatActivation.waiting_for_chat_name)
async def process_chat_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã /name)"""
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /name, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    if not message.text or not message.text.startswith('/name'):
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        commands = get_bot_commands()
        
        await message.reply(
            f"‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É {commands['name']} –Ω–∞–∑–≤–∞–Ω–∏–µ_—á–∞—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.\n\n"
            f"üí° –ü—Ä–∏–º–µ—Ä—ã:\n"
            f"‚Ä¢ {commands['name']} –†–∞–±–æ—á–∏–π —á–∞—Ç\n"
            f"‚Ä¢ {commands['name']} –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n"
            f"‚Ä¢ {commands['name']} –û–±—â–∏–π —á–∞—Ç"
        )
        return

@router.message(Command("list_activated"))
async def cmd_list_activated(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ –õ–°)"""
    if message.chat.type != "private":
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
        return
    
    if not is_main_admin(message.from_user.id):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.")
        return
    
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    activated_chats = await db.get_activated_chats()
    
    if not activated_chats:
        await message.reply("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
        return
    
    result = "üìã **–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:**\n\n"
    
    for chat_id, chat_name, activated_by, activated_at in activated_chats:
        activated_date = datetime.fromtimestamp(activated_at).strftime('%d.%m.%Y %H:%M')
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
        escaped_chat_name = chat_name.replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
        result += f"‚Ä¢ **{escaped_chat_name}**\n"
        result += f"  ID: `{chat_id}`\n"
        result += f"  –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª: {activated_by}\n"
        result += f"  –î–∞—Ç–∞: {activated_date}\n\n"
    
    await message.reply(result, parse_mode="Markdown")

@router.message(Command("deactivate_chat"))
async def cmd_deactivate_chat(message: Message) -> None:
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —á–∞—Ç (—Ç–æ–ª—å–∫–æ –≤ –õ–°)"""
    if message.chat.type != "private":
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
        return
    
    if not is_main_admin(message.from_user.id):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç—ã.")
        return
    
    args = message.text.split()
    if len(args) != 2:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/deactivate_chat chat_id\n\n"
            "üí° Chat ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /list_activated"
        )
        return
    
    try:
        chat_id = int(args[1])
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ID, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
        if chat_id > 0:
            chat_id = -chat_id
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Chat ID. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
        return
    
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Ç
    success = await db.deactivate_chat(chat_id)
    
    if success:
        await message.reply(
            f"‚úÖ –ß–∞—Ç `{chat_id}` —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"üóëÔ∏è **–í—Å–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω—ã:**\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø–∏–Ω–≥–∏\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
        )
    else:
        await message.reply(f"‚ùå –ß–∞—Ç `{chat_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Chat ID –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")

@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å username –±–æ—Ç–∞
    commands = get_bot_commands()
    
    if message.chat.type == "private":
        if is_main_admin(message.from_user.id):
            help_text = f"""
üìã **–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**

**–ö–æ–º–∞–Ω–¥—ã –≤ –õ–°:**
‚Ä¢ {commands['generate_code']} - –°–æ–∑–¥–∞—Ç—å –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞
‚Ä¢ {commands['list_activated']} - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
‚Ä¢ {commands['deactivate_chat']} chat_id - –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç

**–ü—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:**
1. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–¥ —á–µ—Ä–µ–∑ {commands['generate_code']}
2. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–∞—Ç–∞
3. –í —á–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ {commands['activate']} –∫–æ–¥
4. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ {commands['name']} –Ω–∞–∑–≤–∞–Ω–∏–µ

**–ö–æ–º–∞–Ω–¥—ã –≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö:**
‚Ä¢ {commands['top_fast']} - –¢–æ–ø –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ {commands['top_slow']} - –¢–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ {commands['me']} - –í–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ {commands['help']} - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ {commands['debug_chat_id']} - –ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞
‚Ä¢ {commands['debug_open_pings']} - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏
"""
        else:
            help_text = f"""
üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**

**–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ —á–∞—Ç–µ:**
1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥
2. –í —á–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ {commands['activate']} –∫–æ–¥
3. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ {commands['name']} –Ω–∞–∑–≤–∞–Ω–∏–µ

**–ö–æ–º–∞–Ω–¥—ã –≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —á–∞—Ç–µ:**
‚Ä¢ {commands['top_fast']} - –¢–æ–ø –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ {commands['top_slow']} - –¢–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ {commands['me']} - –í–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ {commands['help']} - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–∏–Ω–≥–∏ —á–µ—Ä–µ–∑ @username –∏–ª–∏ text_mention
‚Ä¢ –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–∏–Ω–≥ –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ —Ä–µ–∞–∫—Ü–∏–∏
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö

**üí° –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∏–Ω–≥–∏:**
‚Ä¢ –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ @username —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
‚Ä¢ –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
‚Ä¢ –ü–∏–Ω–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ä–∞–∑—É –¥–ª—è –≤—Å–µ—Ö —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç
        bot = message.bot
        db: Database = getattr(bot, "db")
        
        is_activated = await db.is_chat_activated(message.chat.id)
        if not is_activated:
            await message.reply(f"‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {commands['activate']} –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
            return
        
        if not await check_admin_rights(message):
            await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.")
            return
        
        help_text = f"""
üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ {commands['top_fast']} - –¢–æ–ø –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ {commands['top_slow']} - –¢–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ {commands['me']} - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ {commands['help']} - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ {commands['debug_chat_id']} - –ü–æ–∫–∞–∑–∞—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
‚Ä¢ {commands['debug_open_pings']} - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–∏–Ω–≥–∏ —á–µ—Ä–µ–∑ @username –∏–ª–∏ text_mention
‚Ä¢ –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–∏–Ω–≥ –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ —Ä–µ–∞–∫—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö

**üí° –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∏–Ω–≥–∏:**
‚Ä¢ –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ @username —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
‚Ä¢ –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
‚Ä¢ –ü–∏–Ω–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ä–∞–∑—É –¥–ª—è –≤—Å–µ—Ö —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ß–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
"""
    
    await message.reply(help_text, parse_mode="HTML")

@router.message(Command("debug_chat_id"))
async def cmd_debug_chat_id(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ whitelist"""
    chat_type = message.chat.type
    chat_id = message.chat.id
    chat_title = message.chat.title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    
    debug_info = f"""
üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**

**–¢–∏–ø —á–∞—Ç–∞:** {chat_type}
**–ù–∞–∑–≤–∞–Ω–∏–µ:** {chat_title}
**Chat ID:** `{chat_id}`

**–î–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /deactivate_chat {chat_id} –≤ –õ–° —Å –±–æ—Ç–æ–º
"""
    
    await message.reply(debug_info, parse_mode="Markdown")

@router.message(Command("test"))
async def cmd_test(message: Message) -> None:
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    await message.reply("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–æ–≤—ã–π –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è.")

@router.message(Command("clear_db"))
async def cmd_clear_db(message: Message) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)"""
    if not is_main_admin(message.from_user.id):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—á–∏—â–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    await message.reply("üóëÔ∏è –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    try:
        async with db.pool.acquire() as conn:
            # –£–¥–∞–ª—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ
            await conn.execute("DELETE FROM pings")
            await conn.execute("DELETE FROM users")
            await conn.execute("DELETE FROM activation_codes")
            await conn.execute("DELETE FROM activated_chats")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            await conn.execute("ALTER SEQUENCE IF EXISTS pings_id_seq RESTART WITH 1")
            await conn.execute("ALTER SEQUENCE IF EXISTS activation_codes_id_seq RESTART WITH 1")
            await conn.execute("ALTER SEQUENCE IF EXISTS activated_chats_id_seq RESTART WITH 1")
        
        await message.reply("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

@router.message(Command("reset_db"))
async def cmd_reset_db(message: Message) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)"""
    if not is_main_admin(message.from_user.id):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—á–∏—â–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    await message.reply("üóëÔ∏è –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    try:
        async with db.pool.acquire() as conn:
            # –£–¥–∞–ª—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ
            await conn.execute("DELETE FROM pings")
            await conn.execute("DELETE FROM users")
            await conn.execute("DELETE FROM activation_codes")
            await conn.execute("DELETE FROM activated_chats")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            await conn.execute("ALTER SEQUENCE IF EXISTS pings_id_seq RESTART WITH 1")
            await conn.execute("ALTER SEQUENCE IF EXISTS activation_codes_id_seq RESTART WITH 1")
            await conn.execute("ALTER SEQUENCE IF EXISTS activated_chats_id_seq RESTART WITH 1")
        
        await message.reply("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

@router.message(Command("debug_open_pings"))
async def cmd_debug_open_pings(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏ –≤ —á–∞—Ç–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    is_activated = await db.is_chat_activated(message.chat.id)
    if not is_activated:
        await message.reply("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /activate –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return
    
    if not await check_admin_rights(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.")
        return
    
    open_pings = await db.get_open_pings(message.chat.id)
    
    if not open_pings:
        await message.reply("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–∏–Ω–≥–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    
    result = "‚è∞ **–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏:**\n\n"
    
    for user_id, ping_ts, source_message_id in open_pings:
        elapsed = int(datetime.now().timestamp()) - ping_ts
        elapsed_str = format_duration(elapsed)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await db.get_user_info(user_id)
        username = user_info.get('username', f'user_{user_id}') if user_info else f'user_{user_id}'
        
        # –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if source_message_id:
            message_link = create_message_link(message.chat.id, message.chat.username, source_message_id)
            link_text = f"[—Å–æ–æ–±—â–µ–Ω–∏–µ]({message_link})"
        else:
            link_text = "ID –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        result += f"üë§ **{format_user_display(username, user_id)}** - {elapsed_str} ({link_text})\n"
    
    await message.reply(result, parse_mode="Markdown", disable_web_page_preview=True)

@router.message(Command("top_fast"))
async def cmd_top_fast(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    is_activated = await db.is_chat_activated(message.chat.id)
    if not is_activated:
        await message.reply("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /activate –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return
    
    if not await check_admin_rights(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.")
        return
    
    bot_id = getattr(bot, "bot_id", None)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users = await db.get_top(message.chat.id, limit=10, order="ASC")
    
    result = "‚ö° **–¢–æ–ø 10 –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:**\n\n"
    
    if not top_users:
        result += "üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\n"
    else:
        for i, (user_id, n, avg_sec, username) in enumerate(top_users, 1):
            if bot_id and user_id == bot_id:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            
            if avg_sec is not None:
                avg_str = format_duration(int(avg_sec))
            else:
                avg_str = "N/A"
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ username
            escaped_username = escape_username(username, user_id)
            
            result += f"{i}. **{format_user_display(username, user_id)}** - {avg_str} (n={n})\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏
    open_pings = await db.get_open_pings(message.chat.id)
    if open_pings:
        result += "\n‚è∞ **–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏:**\n"
        for user_id, ping_ts, source_message_id in open_pings:
            if bot_id and user_id == bot_id:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            
            elapsed = int(datetime.now().timestamp()) - ping_ts
            elapsed_str = format_duration(elapsed)
            
            user_info = await db.get_user_info(user_id)
            username = user_info.get('username', f'user_{user_id}') if user_info else f'user_{user_id}'
            
            # –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if source_message_id:
                message_link = create_message_link(message.chat.id, message.chat.username, source_message_id)
                link_text = f"[–≤–æ–ø—Ä–æ—Å]({message_link})"
            else:
                link_text = "ID –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            
            result += f"üë§ **{format_user_display(username, user_id)}** - {elapsed_str} ({link_text})\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö (–¥–æ 1000)", callback_data="top_all")],
        [InlineKeyboardButton(text="üêå –¢–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö", callback_data="top_slow")]
    ])
    
    await message.reply(result, parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

@router.message(Command("top_slow"))
async def cmd_top_slow(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    is_activated = await db.is_chat_activated(message.chat.id)
    if not is_activated:
        await message.reply("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /activate –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return
    
    if not await check_admin_rights(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.")
        return
    
    bot_id = getattr(bot, "bot_id", None)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users = await db.get_top(message.chat.id, limit=10, order="DESC")
    
    result = "üêå **–¢–æ–ø 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:**\n\n"
    
    if not top_users:
        result += "üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\n"
    else:
        for i, (user_id, n, avg_sec, username) in enumerate(top_users, 1):
            if bot_id and user_id == bot_id:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            
            if avg_sec is not None:
                avg_str = format_duration(int(avg_sec))
            else:
                avg_str = "N/A"
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ username
            escaped_username = escape_username(username, user_id)
            
            result += f"{i}. **{format_user_display(username, user_id)}** - {avg_str} (n={n})\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏
    open_pings = await db.get_open_pings(message.chat.id)
    if open_pings:
        result += "\n‚è∞ **–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏:**\n"
        for user_id, ping_ts, source_message_id in open_pings:
            if bot_id and user_id == bot_id:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            
            elapsed = int(datetime.now().timestamp()) - ping_ts
            elapsed_str = format_duration(elapsed)
            
            user_info = await db.get_user_info(user_id)
            username = user_info.get('username', f'user_{user_id}') if user_info else f'user_{user_id}'
            
            # –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if source_message_id:
                message_link = create_message_link(message.chat.id, message.chat.username, source_message_id)
                link_text = f"[–≤–æ–ø—Ä–æ—Å]({message_link})"
            else:
                link_text = "ID –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            
            result += f"üë§ **{format_user_display(username, user_id)}** - {elapsed_str} ({link_text})\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö (–¥–æ 1000)", callback_data="top_all")],
        [InlineKeyboardButton(text="‚ö° –¢–æ–ø –±—ã—Å—Ç—Ä—ã—Ö", callback_data="top_fast")]
    ])
    
    await message.reply(result, parse_mode="Markdown", reply_markup=keyboard, disable_web_page_preview=True)

@router.callback_query(F.data == "top_all")
async def on_top_all(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ 1000)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç
    bot = callback.message.bot
    db: Database = getattr(bot, "db")
    
    is_activated = await db.is_chat_activated(callback.message.chat.id)
    if not is_activated:
        await callback.answer("‚ùå –ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        return
    
    if not await check_admin_rights(callback.message):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", show_alert=True)
        return
    
    bot_id = getattr(bot, "bot_id", None)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = await db.get_top(callback.message.chat.id, limit=1000)
    
    if not all_users:
        await callback.answer("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    result = "üìä **–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–¥–æ 1000):**\n\n"
    
    for i, (user_id, n, avg_sec, username) in enumerate(all_users, 1):
        if bot_id and user_id == bot_id:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        
        if avg_sec is not None:
            avg_str = format_duration(int(avg_sec))
        else:
            avg_str = "N/A"
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ username
        escaped_username = escape_username(username, user_id)
        
        result += f"{i}. **{format_user_display(username, user_id)}** - {avg_str} (n={n})\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(result) > 4096:
        parts = [result[i:i+4096] for i in range(0, len(result), 4096)]
        for i, part in enumerate(parts):
            if i == 0:
                await callback.message.edit_text(part, parse_mode="Markdown")
            else:
                await callback.message.answer(part, parse_mode="Markdown")
    else:
        await callback.message.edit_text(result, parse_mode="Markdown")
    
    await callback.answer()

@router.callback_query(F.data == "top_fast")
async def on_top_fast(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç
    bot = callback.message.bot
    db: Database = getattr(bot, "db")
    
    is_activated = await db.is_chat_activated(callback.message.chat.id)
    if not is_activated:
        await callback.answer("‚ùå –ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        return
    
    if not await check_admin_rights(callback.message):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", show_alert=True)
        return
    
    bot_id = getattr(bot, "bot_id", None)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users = await db.get_top(callback.message.chat.id, limit=10, order="ASC")
    
    result = "‚ö° **–¢–æ–ø 10 –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:**\n\n"
    
    if not top_users:
        result += "üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\n"
    else:
        for i, (user_id, n, avg_sec, username) in enumerate(top_users, 1):
            if bot_id and user_id == bot_id:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            
            if avg_sec is not None:
                avg_str = format_duration(int(avg_sec))
            else:
                avg_str = "N/A"
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ username
            escaped_username = escape_username(username, user_id)
            
            result += f"{i}. **{format_user_display(username, user_id)}** - {avg_str} (n={n})\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏
    open_pings = await db.get_open_pings(callback.message.chat.id)
    if open_pings:
        result += "\n‚è∞ **–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏:**\n"
        for user_id, ping_ts, source_message_id in open_pings:
            if bot_id and user_id == bot_id:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            
            elapsed = int(datetime.now().timestamp()) - ping_ts
            elapsed_str = format_duration(elapsed)
            
            user_info = await db.get_user_info(user_id)
            username = user_info.get('username', f'user_{user_id}') if user_info else f'user_{user_id}'
            
            # –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if source_message_id:
                message_link = create_message_link(callback.message.chat.id, callback.message.chat.username, source_message_id)
                link_text = f"[–≤–æ–ø—Ä–æ—Å]({message_link})"
            else:
                link_text = "ID –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

            result += f"üë§ **{format_user_display(username, user_id)}** - {elapsed_str} ({link_text})\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö (–¥–æ 1000)", callback_data="top_all")],
        [InlineKeyboardButton(text="üêå –¢–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö", callback_data="top_slow")]
    ])
    
    await callback.message.edit_text(result, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "top_slow")
async def on_top_slow(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç
    bot = callback.message.bot
    db: Database = getattr(bot, "db")
    
    is_activated = await db.is_chat_activated(callback.message.chat.id)
    if not is_activated:
        await callback.answer("‚ùå –ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        return
    
    if not await check_admin_rights(callback.message):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", show_alert=True)
        return
    
    bot_id = getattr(bot, "bot_id", None)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users = await db.get_top(callback.message.chat.id, limit=10, order="DESC")
    
    result = "üêå **–¢–æ–ø 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:**\n\n"
    
    if not top_users:
        result += "üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\n"
    else:
        for i, (user_id, n, avg_sec, username) in enumerate(top_users, 1):
            if bot_id and user_id == bot_id:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            
            if avg_sec is not None:
                avg_str = format_duration(int(avg_sec))
            else:
                avg_str = "N/A"
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ username
            escaped_username = escape_username(username, user_id)
            
            result += f"{i}. **{format_user_display(username, user_id)}** - {avg_str} (n={n})\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏
    open_pings = await db.get_open_pings(callback.message.chat.id)
    if open_pings:
        result += "\n‚è∞ **–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–∏–Ω–≥–∏:**\n"
        for user_id, ping_ts, source_message_id in open_pings:
            if bot_id and user_id == bot_id:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            
            elapsed = int(datetime.now().timestamp()) - ping_ts
            elapsed_str = format_duration(elapsed)
            
            user_info = await db.get_user_info(user_id)
            username = user_info.get('username', f'user_{user_id}') if user_info else f'user_{user_id}'
            
            # –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if source_message_id:
                message_link = create_message_link(callback.message.chat.id, callback.message.chat.username, source_message_id)
                link_text = f"[–≤–æ–ø—Ä–æ—Å]({message_link})"
            else:
                link_text = "ID –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            
            result += f"üë§ **{format_user_display(username, user_id)}** - {elapsed_str} ({link_text})\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö (–¥–æ 1000)", callback_data="top_all")],
        [InlineKeyboardButton(text="‚ö° –¢–æ–ø –±—ã—Å—Ç—Ä—ã—Ö", callback_data="top_fast")]
    ])
    
    await callback.message.edit_text(result, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

@router.message(Command("me"))
async def cmd_me(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    is_activated = await db.is_chat_activated(message.chat.id)
    if not is_activated:
        await message.reply("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /activate –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return
    
    if not await check_admin_rights(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.")
        return
    
    if not message.from_user:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    since_ts = int((datetime.now() - timedelta(days=30)).timestamp())
    stats = await db.get_user_stats(message.chat.id, message.from_user.id, since_ts)
    
    if not stats:
        await message.reply("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    
    n, avg_sec = stats
    
    if avg_sec is not None:
        avg_str = format_duration(int(avg_sec))
    else:
        avg_str = "N/A"
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ username
    user_display_name = message.from_user.username or message.from_user.first_name
    escaped_username = escape_username(user_display_name, message.from_user.id)
    
    result = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {format_user_display(user_display_name, message.from_user.id)}
üìà **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–Ω–≥–æ–≤:** {n}
‚è±Ô∏è **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** {avg_str}
"""
    
    await message.reply(result, parse_mode="Markdown")



@router.message(F.text | F.caption)
async def on_message(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    if message.text and message.text.startswith('/'):
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    is_activated = await db.is_chat_activated(message.chat.id)
    if not is_activated:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
    
    bot_id = getattr(bot, "bot_id", None)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user and not message.from_user.is_bot and (not bot_id or message.from_user.id != bot_id):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username
        if message.from_user.username:
            await db.update_temp_user(
                message.from_user.username,
                message.from_user.id,
                message.from_user.first_name,
                message.from_user.last_name
            )
        
        # –û–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await db.upsert_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
        )

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏–Ω–≥–∏
    entities = message.entities or []
    text = message.text or message.caption or ""
    
    logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: entities={len(entities)}, text='{text[:50]}...'")
    
    for ent in entities:
        logging.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º entity: type={ent.type}, user={ent.user.id if ent.user else None}")
        logging.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è: ent.type='{ent.type}', ent.user={ent.user}, bot_id={bot_id}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏–Ω–≥–∞
        is_text_mention = ent.type == "text_mention" and ent.user and not ent.user.is_bot
        is_mention = ent.type == "mention"
        is_not_bot = not bot_id or (ent.user and ent.user.id != bot_id) if ent.user else True
        
        logging.info(f"–£—Å–ª–æ–≤–∏—è: is_text_mention={is_text_mention}, is_mention={is_mention}, is_not_bot={is_not_bot}")
        
        if (is_text_mention or is_mention) and is_not_bot:
            logging.info(f"‚úÖ –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º entity —Ç–∏–ø–∞ '{ent.type}'")
            target_user_id = None
            
            if ent.type == "text_mention" and ent.user:
                target_user_id = ent.user.id
                logging.info(f"text_mention: target_user_id={target_user_id}")
            elif ent.type == "mention":
                mention_text = text[ent.offset : ent.offset + ent.length]
                username = mention_text.lstrip("@")
                logging.info(f"–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: mention_text='{mention_text}', username='{username}'")
                
                # –ò—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                target_user_id = await db.resolve_username(username)
                logging.info(f"–ü–æ–∏—Å–∫ –≤ –ë–î: username='{username}', resolved user_id={target_user_id}")
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if not target_user_id:
                    logging.info(f"–°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è @{username}")
                    target_user_id = await db.create_temp_user_by_username(username)
                    logging.info(f"–°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: username='{username}', temp_user_id={target_user_id}")
            
            if target_user_id and target_user_id != message.from_user.id:
                logging.info(f"–°–æ–∑–¥–∞—ë–º –ø–∏–Ω–≥: {ent.type} –¥–ª—è user_id={target_user_id}")
                await db.record_ping(
                    chat_id=message.chat.id,
                    source_message_id=message.message_id,
                    source_user_id=message.from_user.id,
                    target_user_id=target_user_id,
                    ping_reason=ent.type,
                    ping_ts=int(message.date.timestamp()),
                )
            else:
                logging.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∏–Ω–≥: target_user_id={target_user_id}, from_user.id={message.from_user.id}")
        else:
            logging.info(f"‚ùå –£—Å–ª–æ–≤–∏—è –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è entity —Ç–∏–ø–∞ '{ent.type}'")
            continue
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
    if message.from_user and not message.from_user.is_bot and (not bot_id or message.from_user.id != bot_id):
        logging.info(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –ø–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (username: {message.from_user.username})")
        result = await db.close_oldest_open_ping_by_message(
            chat_id=message.chat.id,
            target_user_id=message.from_user.id,
            close_message_id=message.message_id,
            close_ts=int(message.date.timestamp()),
        )
        if result:
            logging.info(f"‚úÖ –ü–∏–Ω–≥ –∑–∞–∫—Ä—ã—Ç: ping_id={result}")
        else:
            logging.info(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–∏–Ω–≥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")

@router.message(F.reply_to_message)
async def on_reply(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç
    bot = message.bot
    db: Database = getattr(bot, "db")
    
    is_activated = await db.is_chat_activated(message.chat.id)
    if not is_activated:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
    
    bot_id = getattr(bot, "bot_id", None)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
    if message.from_user and not message.from_user.is_bot and (not bot_id or message.from_user.id != bot_id):
        logging.info(f"üîç [REPLY] –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –ø–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (username: {message.from_user.username})")
        result = await db.close_oldest_open_ping_by_message(
            chat_id=message.chat.id,
            target_user_id=message.from_user.id,
            close_message_id=message.message_id,
            close_ts=int(message.date.timestamp()),
        )
        if result:
            logging.info(f"‚úÖ [REPLY] –ü–∏–Ω–≥ –∑–∞–∫—Ä—ã—Ç: ping_id={result}")
        else:
            logging.info(f"‚ùå [REPLY] –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–∏–Ω–≥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")






