import os
import asyncpg
from datetime import datetime
from typing import Optional, List, Tuple, Dict, Any
import logging
import hashlib
import time
from functools import lru_cache

class Database:
    def __init__(self, dsn: Optional[str] = None):
        self._dsn = dsn or os.getenv("DATABASE_URL")
        self.pool: Optional[asyncpg.Pool] = None
        self._prepared_statements: Dict[str, str] = {}
        
        if not self._dsn:
            raise RuntimeError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è DSN
        if not self._dsn.startswith(('postgresql://', 'postgres://')):
            raise RuntimeError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç DATABASE_URL")

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏"""
        try:
            logging.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            self.pool = await asyncpg.create_pool(
                self._dsn, 
                min_size=2,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
                max_size=10,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
                command_timeout=60,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                server_settings={
                    'application_name': 'pingmeter_bot',
                    'jit': 'off',  # –û—Ç–∫–ª—é—á–∞–µ–º JIT –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    'random_page_cost': '1.1',  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è SSD
                    'effective_cache_size': '256MB'  # –†–∞–∑–º–µ—Ä –∫—ç—à–∞
                }
            )
            
            logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–¥–µ–∫—Å—ã
            await self._create_tables()
            await self._create_indexes()
            await self._prepare_statements()
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    async def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        async with self.pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            existing_tables = await conn.fetch("""
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public' AND table_name IN ('users', 'pings', 'activation_codes', 'activated_chats')
            """)
            existing_table_names = [row['table_name'] for row in existing_tables]
            
            # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if 'users' not in existing_table_names:
                await conn.execute("""
                CREATE TABLE users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    last_seen_ts BIGINT NOT NULL,
                    created_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM NOW())
                );
                """)
            else:
                # –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã users
                await self._migrate_users_table(conn)
            
            if 'pings' not in existing_table_names:
                await conn.execute("""
                CREATE TABLE pings (
                    id SERIAL PRIMARY KEY,
                    chat_id BIGINT NOT NULL,
                    source_message_id BIGINT NOT NULL,
                    source_user_id BIGINT NOT NULL,
                    target_user_id BIGINT NOT NULL,
                    ping_reason TEXT NOT NULL,
                    ping_ts BIGINT NOT NULL,
                    close_ts BIGINT,
                    close_type TEXT,
                    close_message_id BIGINT,
                    reaction_emoji TEXT,
                    created_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM NOW())
                );
                """)
            else:
                # –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã pings
                await self._migrate_pings_table(conn)
            
            if 'activation_codes' not in existing_table_names:
                await conn.execute("""
                CREATE TABLE activation_codes (
                    id SERIAL PRIMARY KEY,
                    code TEXT UNIQUE NOT NULL,
                    expires_at BIGINT NOT NULL,
                    created_by BIGINT NOT NULL,
                    created_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM NOW()),
                    used_at BIGINT,
                    used_by BIGINT
                );
                """)
            else:
                # –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã activation_codes
                await self._migrate_activation_codes_table(conn)
            
            if 'activated_chats' not in existing_table_names:
                await conn.execute("""
                CREATE TABLE activated_chats (
                    id SERIAL PRIMARY KEY,
                    chat_id BIGINT UNIQUE NOT NULL,
                    chat_name TEXT NOT NULL,
                    activated_by BIGINT NOT NULL,
                    activated_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM NOW()),
                    last_activity BIGINT DEFAULT EXTRACT(EPOCH FROM NOW())
                );
                """)
            else:
                # –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã activated_chats
                await self._migrate_activated_chats_table(conn)

    async def _create_indexes(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"""
        async with self.pool.acquire() as conn:
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users
            await conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_users_username ON users(username) WHERE username IS NOT NULL;
                CREATE INDEX IF NOT EXISTS idx_users_last_seen ON users(last_seen_ts DESC);
            """)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã pings
            await conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_pings_chat_target ON pings(chat_id, target_user_id);
                CREATE INDEX IF NOT EXISTS idx_pings_target_open ON pings(target_user_id) WHERE close_ts IS NULL;
                CREATE INDEX IF NOT EXISTS idx_pings_chat_open ON pings(chat_id) WHERE close_ts IS NULL;
                CREATE INDEX IF NOT EXISTS idx_pings_ping_ts ON pings(ping_ts DESC);
                CREATE INDEX IF NOT EXISTS idx_pings_close_ts ON pings(close_ts DESC) WHERE close_ts IS NOT NULL;
                CREATE INDEX IF NOT EXISTS idx_pings_chat_ping_ts ON pings(chat_id, ping_ts DESC);
            """)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã activation_codes
            await conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_activation_codes_expires ON activation_codes(expires_at);
                CREATE INDEX IF NOT EXISTS idx_activation_codes_used ON activation_codes(used_at) WHERE used_at IS NOT NULL;
            """)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã activated_chats
            await conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_activated_chats_last_activity ON activated_chats(last_activity DESC);
            """)

    async def _prepare_statements(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        async with self.pool.acquire() as conn:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            self._prepared_statements = {
                'get_user': await conn.prepare("""
                    SELECT user_id, username, first_name, last_name, last_seen_ts 
                    FROM users WHERE user_id = $1
                """),
                'get_user_by_username': await conn.prepare("""
                    SELECT user_id FROM users WHERE lower(username) = lower($1) 
                    ORDER BY last_seen_ts DESC LIMIT 1
                """),
                'get_open_pings': await conn.prepare("""
                    SELECT target_user_id, ping_ts, source_message_id 
                    FROM pings 
                    WHERE chat_id = $1 AND close_ts IS NULL 
                    ORDER BY ping_ts ASC
                """),
                'is_chat_activated': await conn.prepare("""
                    SELECT chat_id FROM activated_chats WHERE chat_id = $1
                """),
                'get_activation_code': await conn.prepare("""
                    SELECT code, expires_at, created_by, created_at 
                    FROM activation_codes 
                    WHERE code = $1 AND expires_at > $2 AND used_at IS NULL
                """)
            }

    async def _migrate_pings_table(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã pings"""
        columns = await conn.fetch("""
            SELECT column_name FROM information_schema.columns 
            WHERE table_name = 'pings' AND table_schema = 'public'
        """)
        column_names = [row['column_name'] for row in columns]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞ closed_ts, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –µ—ë
        if 'closed_ts' in column_names and 'close_ts' not in column_names:
            await conn.execute("ALTER TABLE pings RENAME COLUMN closed_ts TO close_ts;")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'close_type' not in column_names:
            await conn.execute("ALTER TABLE pings ADD COLUMN close_type TEXT;")
        if 'close_message_id' not in column_names:
            await conn.execute("ALTER TABLE pings ADD COLUMN close_message_id BIGINT;")
        if 'reaction_emoji' not in column_names:
            await conn.execute("ALTER TABLE pings ADD COLUMN reaction_emoji TEXT;")
        if 'created_at' not in column_names:
            await conn.execute("ALTER TABLE pings ADD COLUMN created_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM NOW());")

    async def _migrate_activation_codes_table(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã activation_codes"""
        columns = await conn.fetch("""
            SELECT column_name FROM information_schema.columns 
            WHERE table_name = 'activation_codes' AND table_schema = 'public'
        """)
        column_names = [row['column_name'] for row in columns]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'used_at' not in column_names:
            await conn.execute("ALTER TABLE activation_codes ADD COLUMN used_at BIGINT;")
        if 'used_by' not in column_names:
            await conn.execute("ALTER TABLE activation_codes ADD COLUMN used_by BIGINT;")
        if 'created_at' not in column_names:
            await conn.execute("ALTER TABLE activation_codes ADD COLUMN created_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM NOW());")

    async def _migrate_activated_chats_table(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã activated_chats"""
        columns = await conn.fetch("""
            SELECT column_name FROM information_schema.columns 
            WHERE table_name = 'activated_chats' AND table_schema = 'public'
        """)
        column_names = [row['column_name'] for row in columns]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'last_activity' not in column_names:
            await conn.execute("ALTER TABLE activated_chats ADD COLUMN last_activity BIGINT DEFAULT EXTRACT(EPOCH FROM NOW());")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞ activation_code, —É–¥–∞–ª—è–µ–º –µ—ë
        if 'activation_code' in column_names:
            await conn.execute("ALTER TABLE activated_chats DROP COLUMN activation_code;")

    async def _migrate_users_table(self, conn):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã users"""
        columns = await conn.fetch("""
            SELECT column_name FROM information_schema.columns 
            WHERE table_name = 'users' AND table_schema = 'public'
        """)
        column_names = [row['column_name'] for row in columns]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'created_at' not in column_names:
            await conn.execute("ALTER TABLE users ADD COLUMN created_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM NOW());")

    @lru_cache(maxsize=1000)
    def _hash_username(self, username: str) -> int:
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ username –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return int(hashlib.md5(username.encode()).hexdigest()[:8], 16) % (2**31)

    async def create_temp_user_by_username(self, username: str) -> int:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –¥–ª—è –ø–∏–Ω–≥–æ–≤"""
        now = int(time.time())
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π user_id (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏)
        temp_user_id = -self._hash_username(username)
        
        async with self.pool.acquire() as conn:
            await conn.execute(
                """
                INSERT INTO users(user_id, username, first_name, last_name, last_seen_ts)
                VALUES($1, $2, $3, $4, $5)
                ON CONFLICT (user_id) DO UPDATE SET
                    username=EXCLUDED.username,
                    last_seen_ts=EXCLUDED.last_seen_ts
                """,
                temp_user_id, username, None, None, now
            )
        return temp_user_id





    async def upsert_user(self, user_id: int, username: Optional[str], first_name: Optional[str], last_name: Optional[str]):
        now = int(datetime.utcnow().timestamp())
        async with self.pool.acquire() as conn:
            await conn.execute(
                """
                INSERT INTO users(user_id, username, first_name, last_name, last_seen_ts)
                VALUES($1, $2, $3, $4, $5)
                ON CONFLICT (user_id) DO UPDATE SET
                    username=EXCLUDED.username,
                    first_name=EXCLUDED.first_name,
                    last_name=EXCLUDED.last_name,
                    last_seen_ts=EXCLUDED.last_seen_ts
                """,
                user_id, username, first_name, last_name, now
            )

    async def record_ping(self, chat_id: int, source_message_id: int, source_user_id: int, target_user_id: int, ping_reason: str, ping_ts: int):
        async with self.pool.acquire() as conn:
            print(f"üìù –°–æ–∑–¥–∞—ë–º –ø–∏–Ω–≥: chat_id={chat_id}, target_user_id={target_user_id}, reason={ping_reason}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            row = await conn.fetchrow(
                """
                SELECT id FROM pings
                WHERE chat_id=$1 AND target_user_id=$2 AND close_ts IS NULL
                LIMIT 1
                """,
                chat_id, target_user_id
            )
            if row:
                print(f"‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–∏–Ω–≥ –¥–ª—è target_user_id={target_user_id}, –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π")
                return  # –£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–∏–Ω–≥, –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
            print(f"‚úÖ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–∏–Ω–≥ –¥–ª—è target_user_id={target_user_id}")
            await conn.execute(
                """
                INSERT INTO pings(chat_id, source_message_id, source_user_id, target_user_id, ping_reason, ping_ts)
                VALUES($1, $2, $3, $4, $5, $6)
                """,
                chat_id, source_message_id, source_user_id, target_user_id, ping_reason, ping_ts
            )

    async def close_oldest_open_ping_by_message(self, chat_id: int, target_user_id: int, close_message_id: int, close_ts: int) -> Optional[int]:
        async with self.pool.acquire() as conn:
            print(f"üîç –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–∏–Ω–≥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: chat_id={chat_id}, target_user_id={target_user_id}")
            row = await conn.fetchrow(
                """
                SELECT id FROM pings
                WHERE chat_id=$1 AND target_user_id=$2 AND close_ts IS NULL
                ORDER BY ping_ts ASC
                LIMIT 1
                """,
                chat_id, target_user_id
            )
            if not row:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–∏–Ω–≥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: chat_id={chat_id}, target_user_id={target_user_id}")
                return None
            ping_id = row["id"]
            print(f"‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∏–Ω–≥: ping_id={ping_id}, close_ts={close_ts}, close_message_id={close_message_id}")
            await conn.execute(
                """
                UPDATE pings SET close_ts=$1, close_type='message', close_message_id=$2 WHERE id=$3
                """,
                close_ts, close_message_id, ping_id
            )
            return ping_id





    async def resolve_username(self, username: str) -> Optional[int]:
        async with self.pool.acquire() as conn:
            print(f"üîç –ò—â–µ–º username='{username}' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            row = await conn.fetchrow(
                """
                SELECT user_id FROM users WHERE lower(username)=lower($1) ORDER BY last_seen_ts DESC LIMIT 1
                """,
                username
            )
            result = row["user_id"] if row else None
            print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ username='{username}': user_id={result}")
            return result

    async def get_user_info(self, user_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow(
                """
                SELECT username, first_name, last_name
                FROM users
                WHERE user_id = $1
                """,
                user_id
            )
            if row:
                return {
                    'username': row['username'],
                    'first_name': row['first_name'],
                    'last_name': row['last_name']
                }
            return None

    async def get_top(self, chat_id: int, limit: int = 10, order: str = "ASC"):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            order: "ASC" –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é), "DESC" –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        """
        async with self.pool.acquire() as conn:
            rows = await conn.fetch(
                f"""
                SELECT 
                    p.target_user_id,
                    COUNT(*) as n,
                    AVG(p.close_ts - p.ping_ts) as avg_sec,
                    u.username
                FROM pings p
                LEFT JOIN users u ON p.target_user_id = u.user_id
                WHERE p.chat_id = $1 
                AND p.close_ts IS NOT NULL
                GROUP BY p.target_user_id, u.username
                HAVING COUNT(*) >= 1
                ORDER BY avg_sec {order}
                LIMIT $2
                """,
                chat_id, limit
            )
            return [(row['target_user_id'], row['n'], row['avg_sec'], row['username'] or f'user_{row["target_user_id"]}') for row in rows]

    async def get_user_stats(self, chat_id: int, user_id: int, since_ts: Optional[int]) -> Optional[Tuple[int, float]]:
        params: List = [chat_id, user_id]
        where = "close_ts IS NOT NULL"
        if since_ts is not None:
            where += " AND ping_ts >= $3"
            params.append(since_ts)
        query = f"""
        SELECT COUNT(*) as cnt, AVG(close_ts - ping_ts) AS avg_response
        FROM pings
        WHERE chat_id=$1 AND target_user_id=$2 AND {where}
        """
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow(query, *params)
            if row and row[0] > 0:
                return (int(row[0]), float(row[1]) if row[1] is not None else None)
            return None

    async def get_open_pings(self, chat_id: int) -> List[Tuple[int, int, int]]:
        async with self.pool.acquire() as conn:
            rows = await conn.fetch(
                """
                SELECT target_user_id, ping_ts, source_message_id FROM pings
                WHERE chat_id=$1 AND close_ts IS NULL
                """,
                chat_id
            )
            return [(r[0], r[1], r[2] if r[2] is not None else None) for r in rows]



    async def save_activation_code(self, code: str, expires_at: int, created_by: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        now = int(datetime.utcnow().timestamp())
        async with self.pool.acquire() as conn:
            await conn.execute(
                """
                INSERT INTO activation_codes(code, expires_at, created_by, created_at)
                VALUES($1, $2, $3, $4)
                """,
                code, expires_at, created_by, now
            )

    async def get_activation_code(self, code: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow(
                """
                SELECT code, expires_at, created_by, created_at
                FROM activation_codes
                WHERE code = $1 AND expires_at > $2 AND used_at IS NULL
                """,
                code, int(datetime.utcnow().timestamp())
            )
            if row:
                return {
                    'code': row['code'],
                    'expires_at': row['expires_at'],
                    'created_by': row['created_by'],
                    'created_at': row['created_at']
                }
            return None

    async def delete_activation_code(self, code: str):
        """–£–¥–∞–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        async with self.pool.acquire() as conn:
            await conn.execute(
                """
                DELETE FROM activation_codes
                WHERE code = $1
                """,
                code
            )

    async def activate_chat(self, chat_id: int, chat_name: str, activation_code: str, activated_by: int):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —á–∞—Ç"""
        now = int(datetime.utcnow().timestamp())
        async with self.pool.acquire() as conn:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Ç
            await conn.execute(
                """
                INSERT INTO activated_chats(chat_id, chat_name, activated_by, activated_at)
                VALUES($1, $2, $3, $4)
                ON CONFLICT (chat_id) DO UPDATE SET
                    chat_name = EXCLUDED.chat_name,
                    activated_by = EXCLUDED.activated_by,
                    activated_at = EXCLUDED.activated_at
                """,
                chat_id, chat_name, activated_by, now
            )
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            await conn.execute(
                """
                UPDATE activation_codes 
                SET used_at = $1, used_by = $2 
                WHERE code = $3
                """,
                now, activated_by, activation_code
            )

    async def is_chat_activated(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç"""
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow(
                """
                SELECT chat_id FROM activated_chats
                WHERE chat_id = $1
                """,
                chat_id
            )
            return row is not None

    async def get_activated_chats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        async with self.pool.acquire() as conn:
            rows = await conn.fetch(
                """
                SELECT chat_id, chat_name, activated_by, activated_at
                FROM activated_chats
                ORDER BY activated_at DESC
                """
            )
            return [(row['chat_id'], row['chat_name'], row['activated_by'], row['activated_at']) for row in rows]

    async def deactivate_chat(self, chat_id: int) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —á–∞—Ç –∏ –æ—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        async with self.pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç
            chat_exists = await conn.fetchrow(
                "SELECT chat_id FROM activated_chats WHERE chat_id = $1",
                chat_id
            )
            
            if not chat_exists:
                return False
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
            async with conn.transaction():
                # 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–∏–Ω–≥–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                pings_deleted = await conn.execute(
                    "DELETE FROM pings WHERE chat_id = $1",
                    chat_id
                )
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø–∏–Ω–≥–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {pings_deleted}")
                
                # 2. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
                users_to_delete = await conn.fetch(
                    """
                    SELECT DISTINCT u.user_id 
                    FROM users u
                    LEFT JOIN pings p ON u.user_id = p.source_user_id OR u.user_id = p.target_user_id
                    WHERE u.user_id IN (
                        SELECT DISTINCT source_user_id FROM pings WHERE chat_id = $1
                        UNION
                        SELECT DISTINCT target_user_id FROM pings WHERE chat_id = $1
                    )
                    AND p.id IS NULL
                    """,
                    chat_id
                )
                
                # 3. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –Ω–∏ –≤ –∫–∞–∫–∏—Ö –ø–∏–Ω–≥–∞—Ö
                if users_to_delete:
                    user_ids = [row['user_id'] for row in users_to_delete]
                    users_deleted = await conn.execute(
                        "DELETE FROM users WHERE user_id = ANY($1)",
                        user_ids
                    )
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —á–∞—Ç–∞ {chat_id}: {users_deleted}")
                
                # 4. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞
                result = await conn.execute(
                    "DELETE FROM activated_chats WHERE chat_id = $1",
                    chat_id
                )
                
                print(f"‚úÖ –ß–∞—Ç {chat_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
                return result != "DELETE 0"

    async def close(self):
        if self.pool is not None:
            await self.pool.close()



    async def update_temp_user(self, username: str, real_user_id: int, first_name: str = None, last_name: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        now = int(datetime.utcnow().timestamp())
        async with self.pool.acquire() as conn:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
            temp_user = await conn.fetchrow(
                "SELECT user_id FROM users WHERE username = $1 AND user_id < 0",
                username
            )
            
            if temp_user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                await conn.execute(
                    """
                    UPDATE users 
                    SET user_id = $1, first_name = $2, last_name = $3, last_seen_ts = $4
                    WHERE user_id = $5
                    """,
                    real_user_id, first_name, last_name, now, temp_user['user_id']
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–∏–Ω–≥–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º user_id –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
                await conn.execute(
                    """
                    UPDATE pings 
                    SET target_user_id = $1 
                    WHERE target_user_id = $2
                    """,
                    real_user_id, temp_user['user_id']
                )
                
                logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username}: {temp_user['user_id']} -> {real_user_id}")


