import asyncio
import logging
import os
import re
from contextlib import asynccontextmanager
from typing import Optional

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest, TelegramConflictError

from app.handlers import router
from app.db import Database


def validate_bot_token(token: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    if not token:
        return False
    # Telegram bot token format: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz
    pattern = r'^\d{8,10}:[A-Za-z0-9_-]{35}$'
    return bool(re.match(pattern, token))


def setup_logging(log_level: str = "INFO") -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
    # –£–±–∏—Ä–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤
    class SensitiveFormatter(logging.Formatter):
        def format(self, record):
            # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏ –≤ –ª–æ–≥–∞—Ö
            if hasattr(record, 'msg'):
                record.msg = re.sub(r'BOT_TOKEN=[^,\s]+', 'BOT_TOKEN=***', str(record.msg))
                record.msg = re.sub(r'DATABASE_URL=[^,\s]+', 'DATABASE_URL=***', str(record.msg))
            return super().format(record)
    
    logging.basicConfig(
        level=getattr(logging, log_level.upper(), logging.INFO),
        format="%(asctime)s %(levelname)s %(name)s: %(message)s",
        handlers=[
            logging.StreamHandler()
        ]
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –∫–æ –≤—Å–µ–º –ª–æ–≥–≥–µ—Ä–∞–º
    for handler in logging.root.handlers:
        handler.setFormatter(SensitiveFormatter("%(asctime)s %(levelname)s %(name)s: %(message)s"))


@asynccontextmanager
async def app_lifespan(db: Database):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        await db.initialize()
        yield
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        try:
            await db.close()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


async def run() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_level = os.getenv("LOG_LEVEL", "INFO")
        setup_logging(log_level)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        token = os.getenv("BOT_TOKEN")
        if not token:
            raise RuntimeError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        if not validate_bot_token(token):
            raise RuntimeError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BOT_TOKEN")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º DATABASE_URL
        database_url = os.getenv("DATABASE_URL")
        if not database_url:
            raise RuntimeError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MAIN_ADMIN_ID
        main_admin_id = os.getenv("MAIN_ADMIN_ID")
        if not main_admin_id or not main_admin_id.isdigit():
            logging.warning("MAIN_ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = Database()
        
        async with app_lifespan(db):
            logging.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            bot = Bot(
                token=token, 
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫ –±–æ—Ç—É
            setattr(bot, "db", db)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            try:
                logging.info("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...")
                me = await bot.get_me()
                setattr(bot, "bot_id", me.id)
                logging.info(f"‚úÖ –ë–æ—Ç @{me.username} (ID: {me.id}) –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            except TelegramBadRequest as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
                raise
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            dp = Dispatcher()
            dp.include_router(router)
            
            logging.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                await dp.start_polling(bot)
            except TelegramConflictError:
                logging.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞")
                raise
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ polling: {e}")
                raise
                
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise


if __name__ == "__main__":
    try:
        asyncio.run(run())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)