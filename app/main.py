import asyncio
import logging
import os
from contextlib import asynccontextmanager

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode

from app.handlers import router
from app.db import Database


@asynccontextmanager
async def app_lifespan(db: Database):
    try:
        await db.initialize()
        yield
    finally:
        await db.close()


async def run() -> None:
    try:
        load_dotenv()
        log_level = os.getenv("LOG_LEVEL", "INFO").upper()
        logging.basicConfig(
            level=getattr(logging, log_level, logging.INFO),
            format="%(asctime)s %(levelname)s %(name)s: %(message)s",
        )

        token = os.getenv("BOT_TOKEN")
        if not token:
            raise RuntimeError("BOT_TOKEN is not set in environment")

        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        db = Database()  # –ù–µ –ø–µ—Ä–µ–¥–∞—ë–º db_path, –ø—É—Å—Ç—å –±–µ—Ä—ë—Ç –∏–∑ DATABASE_URL

        async with app_lifespan(db):
            print("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞...")
            bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            setattr(bot, "db", db)
            
            print("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...")
            me = await bot.get_me()
            setattr(bot, "bot_id", me.id)
            print(f"‚úÖ –ë–æ—Ç @{me.username} (ID: {me.id}) –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
            dp = Dispatcher()
            dp.include_router(router)
            print("üîÑ –ó–∞–ø—É—Å–∫ polling...")
            await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(run())